// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now()) @db.Timestamptz(3)
  updateAt  DateTime   @updatedAt @db.Timestamptz(3)
  RoleMenu  RoleMenu[]
  Users     Users[]
  SOP       SOP[]
}

model Menu {
  id        Int        @id @default(autoincrement())
  title     String     @unique
  seq       Int
  path      String
  icon      String?
  createdAt DateTime   @default(now()) @db.Timestamptz(3)
  updateAt  DateTime   @updatedAt @db.Timestamptz(3)
  RoleMenu  RoleMenu[]
}

model RoleMenu {
  id        Int      @id @default(autoincrement())
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  menu      Menu     @relation(fields: [menuId], references: [id])
  menuId    Int
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updateAt  DateTime @updatedAt @db.Timestamptz(3)
}

model UserCoop {
  id        Int      @id @default(autoincrement())
  user      Users    @relation(fields: [userId], references: [id])
  userId    Int
  coop      Coop     @relation(fields: [coopId], references: [id])
  coopId    Int
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updateAt  DateTime @updatedAt @db.Timestamptz(3)
}

model Users {
  id              Int               @id @default(autoincrement())
  nik             String            @unique
  password        String
  name            String
  role            Role              @relation(fields: [roleId], references: [id])
  roleId          Int
  email           String?
  phone           String?
  avatar          String?
  is_active       Boolean           @default(true)
  createdAt       DateTime          @default(now()) @db.Timestamptz(3)
  updateAt        DateTime          @updatedAt @db.Timestamptz(3)
  ProgressSOP     ProgressSOP[]
  CoopDiagnostics CoopDiagnostics[]
  FeedsMedicines  FeedsMedicines[]
  UserCoop        UserCoop[]
  Cashflows       Cashflow[]
}

model Coop {
  id              Int               @id @default(autoincrement())
  name            String
  nik             String            @unique
  address         String
  createdAt       DateTime          @default(now()) @db.Timestamptz(3)
  updateAt        DateTime          @updatedAt @db.Timestamptz(3)
  FeedsMedicines  FeedsMedicines[]
  EggProduction   EggProduction[]
  CoopDiagnostics CoopDiagnostics[]
  UserCoop        UserCoop[]
}

model Cashflow {
  id         Int      @id @default(autoincrement())
  periode    DateTime @db.Date 
  user       Users    @relation(fields: [userId], references: [id])
  userId     Int
  trans_date DateTime @db.Timestamptz(3)
  tipe       String
  nominal    Int
  total      Int
  createdAt  DateTime @default(now()) @db.Timestamptz(3)
  updateAt   DateTime @updatedAt @db.Timestamptz(3)
}

model SOP {
  id          Int      @id @default(autoincrement())
  role        Role     @relation(fields: [roleId], references: [id])
  roleId      Int
  title       String
  time        String
  description String
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updateAt    DateTime @updatedAt @db.Timestamptz(3)
}

model ProgressSOP {
  id        Int      @id @default(autoincrement())
  user      Users    @relation(fields: [userId], references: [id])
  userId    Int
  detail    Json
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updateAt  DateTime @updatedAt @db.Timestamptz(3)
}

model FeedsMedicines {
  id                    Int                     @id @default(autoincrement())
  SKU                   String                  @unique
  coop                  Coop                    @relation(fields: [coopId], references: [id])
  coopId                Int
  name                  String
  user                  Users                   @relation(fields: [userId], references: [id])
  userId                Int
  quantity              Int
  uom                   String?
  price                 Int
  total                 Int
  createdAt             DateTime                @default(now()) @db.Timestamptz(3)
  updateAt              DateTime                @updatedAt @db.Timestamptz(3)
  HistoryFeedsMedicines HistoryFeedsMedicines[]
  CoopDiagnostics       CoopDiagnostics[]
}

model HistoryFeedsMedicines {
  id        Int            @id @default(autoincrement())
  feed      FeedsMedicines @relation(fields: [feedId], references: [id])
  feedId    Int
  quantity  Int
  tipe      String
  transDate DateTime
  createdAt DateTime       @default(now()) @db.Timestamptz(3)
  updateAt  DateTime       @updatedAt @db.Timestamptz(3)
}

model EggProduction {
  id              Int      @id @default(autoincrement())
  coop            Coop     @relation(fields: [coopId], references: [id])
  coopId          Int
  transDate       DateTime @db.Timestamptz(3)
  ageInDay        Int?
  ageInWeek       Int?
  pop             Int?
  m               Int?
  afk             Int?
  sell            Int?
  finalPop        Int?
  feedType        String?
  feedWeight      Int?
  feedFIT         Decimal?
  prodPieceN      Int?
  prodPieceP      Int?
  prodPieceBS     Int?
  prodTotalPiece  Int?
  prodWeightN     Decimal?
  prodWeightP     Decimal?
  prodWeightBS    Decimal?
  prodTotalWeight Decimal?
  HD              Decimal?
  FCR             Decimal?
  EggWeight       Decimal?
  EggMass         Decimal?
  OVK             Decimal?
  createdAt       DateTime @default(now()) @db.Timestamptz(3)
  updateAt        DateTime @updatedAt @db.Timestamptz(3)
}

model EggProductionTemp {
  id              Int      @id @default(autoincrement())
  isDuplicate     Boolean
  code            String
  coopId          Int
  transDate       DateTime @db.Timestamptz(3)
  ageInDay        Int?
  ageInWeek       Int?
  pop             Int?
  m               Int?
  afk             Int?
  sell            Int?
  finalPop        Int?
  feedType        String?
  feedWeight      Int?
  feedFIT         Decimal?
  prodPieceN      Int?
  prodPieceP      Int?
  prodPieceBS     Int?
  prodTotalPiece  Int?
  prodWeightN     Decimal?
  prodWeightP     Decimal?
  prodWeightBS    Decimal?
  prodTotalWeight Decimal?
  HD              Decimal?
  FCR             Decimal?
  EggWeight       Decimal?
  EggMass         Decimal?
  OVK             Decimal?
  createdAt       DateTime @default(now()) @db.Timestamptz(3)
  updateAt        DateTime @updatedAt @db.Timestamptz(3)
} 

model CoopDiagnostics {
  id         Int             @id @default(autoincrement())
  coop       Coop            @relation(fields: [coopId], references: [id])
  coopId     Int
  transDate  DateTime @db.Timestamptz(3)
  disease    String
  medicine   FeedsMedicines? @relation(fields: [medicineId], references: [id])
  medicineId Int?
  dose       Int?
  status     String?
  reporter   Users           @relation(fields: [reporterId], references: [id])
  reporterId Int
  createdAt  DateTime        @default(now()) @db.Timestamptz(3)
  updateAt   DateTime        @updatedAt @db.Timestamptz(3)
}
